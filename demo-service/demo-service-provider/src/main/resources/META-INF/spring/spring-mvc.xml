<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
         http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd 
        http://www.springframework.org/schema/aop  
            http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"> 
    <aop:aspectj-autoproxy />        
    <context:component-scan base-package="org.jeecgframework.core.aop.*" /> 
	
	<!-- 使用应用服务器默认的Servlet处理静态资源 方案一 -->
    <!-- <mvc:default-servlet-handler /> -->
    <!-- 使用Spring MVC框架自己处理静态资源 方案二 -->
	<!-- <mvc:annotation-driven />
    <mvc:resources location="classpath:/plug-in/" mapping="/plug-in/**" cache-period="864000" />
    <mvc:resources location="classpath:/plug-in-ui/" mapping="/plug-in-ui/**" cache-period="864000" />
    <mvc:resources location="classpath:/content/" mapping="/content/**" cache-period="864000" />
    <mvc:resources location="/upload/" mapping="/upload/**" cache-period="864000" />
    <mvc:resources location="/template/" mapping="/template/**" cache-period="864000" /> -->
   
    <!-- 自动扫描controller包下的所有类，使其认为spring mvc的控制器 -->
    <!-- 加载controller的时候,不加载service,因为此时事物并未生效,若此时加载了service,那么事物无法对service进行拦截 -->
    <context:component-scan base-package="com.guoyicap.*">
        <context:exclude-filter type="annotation"
            expression="org.springframework.stereotype.Service" />
    </context:component-scan>

    <!-- 将多个配置文件读取到容器中，交给Spring管理 -->  
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="locations">  
           <list>
              <!-- 这里支持多种寻址方式：classpath和file -->  
              <value>classpath:dubbo.properties</value>
              <value>classpath:META-INF/sysConfig.properties</value> 
              <value>classpath:META-INF/dbconfig.properties</value>
              <value>classpath:fastdfs-client.properties</value>
              <value>classpath:META-INF/job/jobConfig.properties</value>
              <!-- 推荐使用file的方式引入，这样可以将配置和代码分离 -->  
              <!-- <value>file:/opt/demo/config/demo-mq.properties</value> -->  
            </list>
        </property>
    </bean> 
     
    <!--原有方法：启动Spring MVC的注解功能，完成请求和注解POJO的映射  spring3.1之前用法，   start -->
    <!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
    <!-- <bean id="mappingJacksonHttpMessageConverter"
        class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>              
                <value>text/html;charset=UTF-8</value>
                <value>application/json;charset=utf-8</value>增加json格式支持 
            </list>
        </property>
    </bean> -->  
    <bean id="fastJsonHttpMessageConverter"
        class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
                <value>application/json;charset=utf-8</value><!--增加json格式支持 -->
            </list>
        </property>
        <property name="features">
                    <array>
                        <value>WriteMapNullValue</value><!-- 输出时key使用双引号 -->
                        <value>WriteNullStringAsEmpty</value><!-- 输出值为null的字段 -->
                    </array>
        </property>
    </bean>
        
    <!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射， 配置一个基于注解的定制的WebBindingInitializer，解决日期转换问题，方法级别的处理器映射 -->
    <bean
        class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="cacheSeconds" value="0" />
        <property name="messageConverters">
            <list>
                <!-- <ref bean="mappingJacksonHttpMessageConverter" /> --><!-- json转换器 -->
                <ref bean="fastJsonHttpMessageConverter"/><!-- json转换器 -->
            </list>
        </property>
        <property name="webBindingInitializer">
            <bean class="org.jeecgframework.core.interceptors.MyWebBinding" />
        </property>
    </bean>
    <!--原有方法：启动Spring MVC的注解功能，完成请求和注解POJO的映射    end -->
    

    <!-- Bean解析器,级别高于默认解析器,寻找bean对象进行二次处理 -->
    <bean id="beanNameViewResolver"
          class="org.springframework.web.servlet.view.BeanNameViewResolver" p:order="0">
    </bean>
    
    <!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用html)- -->
    <bean id="jspViewResolver"
        class="org.springframework.web.servlet.view.InternalResourceViewResolver"
        p:order="1">
        <property name="viewClass"
            value="org.springframework.web.servlet.view.JstlView" />
        <property name="contentType" value="text/html" />
        <property name="prefix" value="/webpage/" />
        <property name="suffix" value=".jsp" />
    </bean>
    
    <!-- FreeMarker环境配置 -->  
    <bean id="fmXmlEscape" class="freemarker.template.utility.XmlEscape"/>
    <bean id="freemarkerConfig"  
        class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">  
        <property name="templateLoaderPath" value="" />  
        <property name="freemarkerSettings">  
            <props>  
                <prop key="template_update_delay">0</prop>  
                <prop key="default_encoding">UTF-8</prop>  
                <prop key="number_format">0.##########</prop>  
                <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>  
                <prop key="classic_compatible">true</prop>  
                <prop key="template_exception_handler">ignore</prop>  
            </props> 
        </property>
        <property name="freemarkerVariables">
            <map>
                <entry key="xml_escape" value-ref="fmXmlEscape"/>
            </map>
        </property>  
    </bean>
    <!-- 配置FreeMark视图 -->
    <bean id="freeMarkerViewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="contentType" value="text/html;charset=UTF-8"/>      
        <property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"/>
        <property name="viewNames" value="*.ftl" />
        <property name="prefix" value="/webpage/" />
        <!-- <property name="suffix" value=".ftl"/> -->
        <property name="cache" value="true"/>
        <property name="exposeSessionAttributes" value="true"/>
        <property name="exposeRequestAttributes" value="true"/>     
        <property name="exposeSpringMacroHelpers" value="true"/>
        <!--  在页面中使用${rc.contextPath}就可获得contextPath -->
        <property name="requestContextAttribute" value="rc"/>
        <property name="order" value="0"/>
    </bean>
    
    <bean id="multipartResolver"
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
        p:defaultEncoding="UTF-8">
        <property name="maxUploadSize">
            <value>104857600</value>
        </property>
        <property name="maxInMemorySize">
            <value>4096</value>
        </property>
    </bean>
    
    <!-- 国际化的消息资源文件（本系统中主要用于显示/错误消息定制） -->  
	<!-- <bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<list>
				在web环境中一定要定位到classpath 否则默认到当前web应用下找
				<value>classpath:message/messages</value>
				<value>classpath:org/hibernate/validator/ValidationMessages</value>
			</list>
		</property>
		<property name="useCodeAsDefaultMessage" value="false" />
		<property name="defaultEncoding" value="UTF-8" />
		<property name="cacheSeconds" value="60" />
	</bean> -->
        
    <!-- 以下 validator  ConversionService 在使用 mvc:annotation-driven 会 自动注册-->  
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">  
	    <!-- <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/> -->
	    <!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties -->  
	    <!-- <property name="validationMessageSource" ref="messageSource"/>  --> 
	</bean>    
    
    <!-- 拦截器 -->
    <mvc:interceptors>
       <mvc:interceptor>
          <mvc:mapping path="/**" />
          <bean class="org.jeecgframework.core.interceptors.EncodingInterceptor" />
       </mvc:interceptor>
    </mvc:interceptors>
    
    
    <import resource="classpath*:META-INF/mybatis/spring-mybatis.xml" /> <!-- mybatis -->
    <!-- <import resource="classpath*:META-INF/hibernate/spring-hibernate.xml" /> --> <!-- hibernate -->
    <import resource="classpath*:META-INF/redis/spring-redis.xml" /> <!-- redis -->
    <import resource="classpath*:META-INF/rabbitmq/spring-rabbitmq.xml" /> <!-- rabbitmq -->
    <import resource="classpath*:META-INF/dubbo/spring-dubbo.xml" /> <!-- dubbo -->
    <import resource="classpath*:META-INF/fastdfs/spring-fastdfs.xml" /> <!-- dubbo -->
    <import resource="classpath*:META-INF/job/spring-job.xml" /> <!-- job -->
</beans>