<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
  						http://www.springframework.org/schema/beans/spring-beans.xsd
  						http://www.springframework.org/schema/context
  						http://www.springframework.org/schema/context/spring-context-4.0.xsd
  						">
    <!-- 自动扫描dao和service包(自动注入) -->
    <context:component-scan base-package="org.jeecgframework.core.redis.*" />  						
	<!-- 引入属性文件 -->
	<!-- <context:property-placeholder location="classpath:sysConfig.properties" /> -->  						
	<!-- jedisPool 连接池配置 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="${redis.maxTotal}" /><!-- 控制一个pool可分配多少个jedis实例 -->
		<property name="maxIdle" value="${redis.maxIdle}" /><!-- 控制一个pool最多有多少个状态为idle(空闲)的jedis实例 -->
		<property name="maxWaitMillis" value="${redis.maxWaitMillis}" /><!-- 表示当borrow一个jedis实例时，最大的等待时间，如果超过等待时间，则直接抛出JedisConnectionException -->
		<property name="testOnBorrow" value="true" /><!-- 在borrow一个jedis实例时，是否提前进行validate操作；如果为true，则得到的jedis实例均是可用的 -->
		<property name="testOnReturn" value="true" /> <!-- 当调用return Object方法时，是否进行有效性检查 -->
		<property name="testWhileIdle" value="true" /><!--表示有一个idle object  evitor线程对idle object进行扫描，如果validate失败，此object会被从pool中drop掉；这一项只有在timeBetweenEvictionRunsMillis大于0时才有意义 -->
		<property name="blockWhenExhausted" value="true"></property><!--当jedis连接池资源耗尽时，是否阻塞 -->
		<property name="timeBetweenEvictionRunsMillis" value="${redis.timeBetweenEvictionRunsMillis}"></property><!--  表示idle object evitor两次扫描之间要sleep的毫秒数； -->
		<property name="numTestsPerEvictionRun" value="${redis.numTestsPerEvictionRun}"></property><!--表示idle  object evitor每次扫描的最多的对象数 -->
		<property name="minEvictableIdleTimeMillis" value="${redis.minEvictableIdleTimeMillis}"></property><!--表示一个对象至少停留在idle状态的最短时间，然后才能被idle  object evitor扫描并驱逐；这一项只有在timeBetweenEvictionRunsMillis大于0时才有意义； -->
	</bean>

	<!-- Spring 集成Jedis -->


	<!-- Spring 集成 SentinelRedisPool -->
	<!--sentinelConfig -->
	<!-- 方法一 -->
	<!-- <bean id="sentinelConfig"
        class="org.springframework.data.redis.connection.RedisSentinelConfiguration">
        <constructor-arg name="master" value="mymaster" />
        <constructor-arg name="sentinelHostAndPorts">
            <set>
                <value>${redis.sentinel.1}</value>
                <value>${redis.sentinel.2}</value>
                <value>${redis.sentinel.3}</value>
            </set>
        </constructor-arg>      
    </bean> -->
	<!-- 方法二 -->
	<!-- 
	<bean id="sentinelConfig" class="org.springframework.data.redis.connection.RedisSentinelConfiguration"> 
		<constructor-arg index="0" type="java.lang.String" value="mymaster" /> 
		<constructor-arg index="1" type="java.util.Set"> 
		<set> 
			<value>${redis.sentinel.1}</value>
            <value>${redis.sentinel.2}</value>
            <value>${redis.sentinel.3}</value> 
		</set> 
		</constructor-arg> 
	</bean> 
	-->
	
	<!--正式环境配置  -->
	<!--jedisConnectionFactory 集成SentinelRedisPool -->
	<!-- <bean id="jedisConnectionFactory"
        class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <constructor-arg ref="sentinelConfig" />
        <property name="poolConfig" ref="jedisPoolConfig" />
        <property name="database" value="${redis.database.default}"></property>
        <property name="timeout" value="${redis.timeout}"></property>
    </bean> -->
	
	<!-- 测试环境配置 -->
	<!--jedisConnectionFactory 集成RedisPool -->
	<bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.hostName}"></property>
		<property name="port" value="${redis.port}"></property>
		<property name="password" value="${redis.password}"></property>
		<property name="database" value="${redis.database.default}"></property>
		<property name="poolConfig" ref="jedisPoolConfig" />
		<property name="timeout" value="${redis.timeout}"></property>
	</bean>

	<!-- redisTemplate -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"
		p:connection-factory-ref="jedisConnectionFactory" >
		<!-- 序列化方式 建议key/hashKey采用StringRedisSerializer。 -->  
        <property name="keySerializer">  
            <bean  
                class="org.springframework.data.redis.serializer.StringRedisSerializer" />  
        </property>  
        <property name="hashKeySerializer">  
            <bean  
                class="org.springframework.data.redis.serializer.StringRedisSerializer" />  
        </property>  
        <property name="valueSerializer">  
            <bean  
                class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />  
        </property>  
        <property name="hashValueSerializer">
            <bean  
                class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />  
        </property> 
	</bean>
	<!-- stringRedisTemplate -->
	<bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
	</bean>
	
	
	
	<!--  <cache:annotation-driven/>还可以指定一个mode属性，可选值有proxy和aspectj。
    默认是使用proxy。当mode为proxy时，只有缓存方法在外部被调用的时候Spring Cache才会发生作用，
    这也就意味着如果一个缓存方法在其声明对象内部被调用时Spring Cache是不会发生作用的。而mode为aspectj时就不会有这种问题。
    另外使用proxy时，只有public方法上的@Cacheable等标注才会起作用，如果需要非public方法上的方法也可以使用Spring Cache时把mode设置为aspectj。
        此外，<cache:annotation-driven/>还可以指定一个proxy-target-class属性，表示是否要代理class，默认为false。
        我们前面提到的@Cacheable、@cacheEvict等也可以标注在接口上，这对于基于接口的代理来说是没有什么问题的，
        但是需要注意的是当我们设置proxy-target-class为true或者mode为aspectj时，是直接基于class进行操作的，
        定义在接口上的@Cacheable等Cache注解不会被识别到，那对应的Spring Cache也不会起作用了。 -->
    <!-- <cache:annotation-driven cache-manager="cacheManager" mode="proxy" proxy-target-class="false"/> -->
    
    <!-- RedisCacheManager -->
    <!-- <bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager" >
        <constructor-arg ref="redisTemplate" />
    </bean> -->
	 
</beans>
