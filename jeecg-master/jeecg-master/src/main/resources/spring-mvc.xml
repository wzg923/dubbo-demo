<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
         http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd 
		http://cxf.apache.org/jaxws 
   		http://cxf.apache.org/schemas/jaxws.xsd">
	<!-- 自动扫描controller包下的所有类，使其认为spring mvc的控制器 -->
	<!-- 加载controller的时候,不加载service,因为此时事物并未生效,若此时加载了service,那么事物无法对service进行拦截 -->
	<context:component-scan base-package="org.jeecgframework.web.*,com.jeecg.*,com.guoyicap.*,com.guoyidzy.*">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Service" />
	</context:component-scan>
	
	<!-- 使用应用服务器默认的Servlet处理静态资源 方案一 -->
    <!-- <mvc:default-servlet-handler /> -->
    <!-- 使用Spring MVC框架自己处理静态资源 方案二 -->
	<!-- <mvc:annotation-driven />
    <mvc:resources location="classpath:/plug-in/" mapping="/plug-in/**" cache-period="864000" />
    <mvc:resources location="classpath:/plug-in-ui/" mapping="/plug-in-ui/**" cache-period="864000" />
    <mvc:resources location="classpath:/content/" mapping="/content/**" cache-period="864000" />
    <mvc:resources location="/upload/" mapping="/upload/**" cache-period="864000" />
    <mvc:resources location="/template/" mapping="/template/**" cache-period="864000" /> -->
    
    <!-- 将多个配置文件读取到容器中，交给Spring管理 -->  
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="locations">  
           <list>
              <!-- 这里支持多种寻址方式：classpath和file -->  
              <value>classpath:dubbo.properties</value>
              <value>classpath:sysConfig.properties</value> 
              <value>classpath:dbconfig.properties</value>
                
              <!-- 推荐使用file的方式引入，这样可以将配置和代码分离 -->  
              <!-- <value>file:/opt/demo/config/demo-mq.properties</value> -->  
            </list>
        </property>
    </bean>

	<!-- ApplicationContext -->
	<bean class="org.jeecgframework.core.util.ApplicationContextUtil"></bean>
	<bean class="org.jeecgframework.p3.core.utils.common.ApplicationContextUtil"></bean>

	<!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
	<!-- <bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean> -->
	<bean id="fastJsonHttpMessageConverter" class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
                <value>application/json;charset=utf-8</value><!--增加json格式支持 -->
            </list>
        </property>
        <property name="features">
            <array>
                <value>WriteMapNullValue</value><!-- 输出时key使用双引号 -->
                <value>WriteNullStringAsEmpty</value><!-- 输出值为null的字段 -->
            </array>
        </property>
    </bean>
	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射， 配置一个基于注解的定制的WebBindingInitializer，解决日期转换问题，方法级别的处理器映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="cacheSeconds" value="0" />
		<property name="messageConverters">
			<list>
				<!-- <ref bean="mappingJacksonHttpMessageConverter" /> --><!-- json转换器 -->
				<ref bean="fastJsonHttpMessageConverter"/><!-- json转换器 -->
			</list>
		</property>
		<property name="webBindingInitializer">
			<bean class="org.jeecgframework.core.interceptors.MyWebBinding" />
		</property>
	</bean>
	
	<!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用html)- -->
	<bean id="defaultViewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:order="3">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="contentType" value="text/html" />
		<property name="prefix" value="/webpage/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	<!-- FreeMarker环境配置 -->  
    <bean id="fmXmlEscape" class="freemarker.template.utility.XmlEscape"/>
    <bean id="freemarkerConfig"  
        class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">  
        <property name="templateLoaderPath" value="" />  
        <property name="freemarkerSettings">  
            <props>  
                <prop key="template_update_delay">0</prop>  
                <prop key="default_encoding">UTF-8</prop>  
                <prop key="number_format">0.##########</prop>  
                <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>  
                <prop key="classic_compatible">true</prop>  
                <prop key="template_exception_handler">ignore</prop>  
            </props> 
        </property>
        <property name="freemarkerVariables">
            <map>
                <entry key="xml_escape" value-ref="fmXmlEscape"/>
            </map>
        </property>  
    </bean>
    <!-- 配置FreeMark视图 -->
    <bean id="freeMarkerViewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="contentType" value="text/html;charset=UTF-8"/>      
        <property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"/>
        <property name="viewNames" value="*.ftl" />
        <property name="prefix" value="/webpage/" />
        <!-- <property name="suffix" value=".ftl"/> -->
        <property name="cache" value="true"/>
        <property name="exposeSessionAttributes" value="true"/>
        <property name="exposeRequestAttributes" value="true"/>     
        <property name="exposeSpringMacroHelpers" value="true"/>
        <!--  在页面中使用${rc.contextPath}就可获得contextPath -->
        <property name="requestContextAttribute" value="rc"/>
        <property name="order" value="0"/>
    </bean>
    
	<!-- 多部分解析器，解析file上传 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8"/>
        <property name="maxUploadSize" value="104857600"/>
        <property name="maxInMemorySize" value="10240" />
	</bean>	
	<!-- Cookie本地化解析器 -->
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
        <property name="cookieName" value="_clientlocale"/>
        <property name="defaultLocale" value="zh_CN"/>
        <property name="cookieMaxAge" value="2147483647"/>
    </bean>

    <!-- Bean解析器,级别高于默认解析器,寻找bean对象进行二次处理 -->
    <bean id="beanNameViewResolver"
          class="org.springframework.web.servlet.view.BeanNameViewResolver" p:order="0">
    </bean>
    <!-- Excel 处理 根据用户输入进行对象处理 -->
    <bean id="jeecgExcelView" class="org.jeecgframework.poi.excel.view.JeecgSingleExcelView" />
    <bean id="jeecgTemplateExcelView" class="org.jeecgframework.poi.excel.view.JeecgTemplateExcelView" />
    <bean id="jeecgTemplateWordView" class="org.jeecgframework.poi.excel.view.JeecgTemplateWordView" />
    <bean id="jeecgMapExcelView" class="org.jeecgframework.poi.excel.view.JeecgMapExcelView" />
	<!-- 方言 -->
	<bean id="dialect"
		class="org.jeecgframework.core.common.hibernate.dialect.DialectFactoryBean">
		<property name="dbType" value="${jdbc.dbType}" />
	</bean>
	<!-- 异常处理类 -->
	<bean id="exceptionHandler"
		class="org.jeecgframework.core.common.exception.GlobalExceptionResolver" />
	<!-- 拦截器 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<bean class="org.jeecgframework.core.interceptors.EncodingInterceptor" />
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/api/**" />
			<bean class="org.jeecgframework.core.interceptors.SignInterceptor" />
		</mvc:interceptor>
		<!--add-end-dangzhenghui  20170402 for 添加 api延签拦截器 对签名统处理-->
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<bean class="org.jeecgframework.core.interceptors.AuthInterceptor">
				<property name="excludeUrls">
					<list>
						<value>loginController.do?goPwdInit</value>
						<value>loginController.do?pwdInit</value>
						<value>loginController.do?login</value>
						<value>loginController.do?logout</value>
						<value>loginController.do?changeDefaultOrg</value>
                        <value>loginController.do?login2</value>
						<value>loginController.do?login3</value>
						<value>loginController.do?checkuser</value>
						<value>loginController.do?checkuser=</value>
						<value>repairController.do?repair</value>
						<value>systemController.do?saveFiles</value>
						<value>repairController.do?deleteAndRepair</value>
						<value>userController.do?userOrgSelect</value>
						<!--移动图表-->
						<value>cgDynamGraphController.do?design</value>
						<value>cgDynamGraphController.do?datagrid</value>

						<!-- 菜单样式图标预览 -->
						<value>webpage/common/functionIconStyleList.jsp</value>
					</list>
				</property>
			</bean>
		</mvc:interceptor>
		<!-- Request重复请求拦截处理 -->
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="com.guoyicap.core.interceptors.RepeatAccessInterceptor">
                <property name="includeUrls">
                    <list>                        
                    </list>
                </property>
            </bean>
        </mvc:interceptor>
	</mvc:interceptors>

	<!-- 智能表单配置引入 -->
	<import resource="classpath*:org/jeecgframework/web/cgform/common/spring-mvc-cgform.xml" />
	<!-- jeecg plugin dev -->
	<import resource="classpath:config/spring-config-p3.xml" />
</beans>